// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("USER") // USER, ADMIN
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  jobs         Job[]
  preferences  UserPreferences?
  analytics    UserAnalytics[]

  @@map("users")
}

model Job {
  id             String    @id @default(cuid())
  title          String
  company        String
  description    String?
  location       String?
  salary         String?
  url            String?
  source         String    // TWITTER, REDDIT, LINKEDIN, GOOGLE, FACEBOOK, BING, YAHOO, YANDEX
  sourceUrl      String?
  contactEmail   String?
  discoveredAt   DateTime  @default(now())
  relevanceScore Float     @default(0.0)
  status         String    @default("DISCOVERED") // DISCOVERED, FILTERED, APPLIED, REJECTED, ARCHIVED
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Foreign keys
  userId String

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]
  contacts     Contact[]

  @@map("jobs")
}

model Application {
  id          String            @id @default(cuid())
  status      String            @default("PENDING") // PENDING, SENT, DELIVERED, OPENED, REPLIED, REJECTED, INTERVIEW, OFFER, DECLINED
  appliedAt   DateTime          @default(now())
  emailSent   Boolean           @default(false)
  emailId     String?
  coverLetter String?
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Foreign keys
  jobId String

  // Relations
  job       Job                   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  responses ApplicationResponse[]

  @@map("applications")
}

model ApplicationResponse {
  id          String               @id @default(cuid())
  type        String               // POSITIVE, NEGATIVE, NEUTRAL
  content     String
  receivedAt  DateTime             @default(now())
  createdAt   DateTime             @default(now())

  // Foreign keys
  applicationId String

  // Relations
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("application_responses")
}

model Contact {
  id           String   @id @default(cuid())
  email        String
  name         String?
  title        String?
  company      String
  source       String
  verified     Boolean  @default(false)
  discoveredAt DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Foreign keys
  jobId String?

  // Relations
  job Job? @relation(fields: [jobId], references: [id], onDelete: SetNull)

  @@map("contacts")
}

model EmailTemplate {
  id        String               @id @default(cuid())
  name      String
  subject   String
  body      String
  variables String // JSON as text in SQLite
  type      String // COVER_LETTER, FOLLOW_UP, THANK_YOU, CUSTOM
  isDefault Boolean              @default(false)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@map("email_templates")
}

model ScrapingJob {
  id          String         @id @default(cuid())
  source      String         // TWITTER, REDDIT, LINKEDIN, GOOGLE, FACEBOOK, BING, YAHOO, YANDEX
  query       String
  status      String         @default("SCHEDULED") // SCHEDULED, RUNNING, COMPLETED, FAILED, CANCELLED
  scheduledAt DateTime
  startedAt   DateTime?
  completedAt DateTime?
  results     String // JSON as text in SQLite
  error       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("scraping_jobs")
}

model UserPreferences {
  id                    String   @id @default(cuid())
  jobKeywords           String // JSON array as text in SQLite
  jobLocations          String // JSON array as text in SQLite
  salaryMin             Int?
  salaryMax             Int?
  jobTypes              String // JSON array as text in SQLite
  experienceLevel       String // JSON array as text in SQLite
  emailDefaultTemplate  String?
  emailSendTime         String   @default("09:00")
  emailTimezone         String   @default("UTC")
  emailFrequency        String   @default("immediate")
  scrapingSources       String // JSON array as text in SQLite
  scrapingFrequency     Int      @default(24)
  maxApplicationsPerDay Int      @default(10)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Foreign keys
  userId String @unique

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model UserAnalytics {
  id               String   @id @default(cuid())
  period           String
  applicationsSent Int      @default(0)
  applicationsResp Int      @default(0)
  interviews       Int      @default(0)
  offers           Int      @default(0)
  jobsDiscovered   Int      @default(0)
  jobsRelevant     Int      @default(0)
  jobsApplied      Int      @default(0)
  responseRate     Float    @default(0.0)
  interviewRate    Float    @default(0.0)
  offerRate        Float    @default(0.0)
  date             DateTime @default(now())
  createdAt        DateTime @default(now())

  // Foreign keys
  userId String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_analytics")
} 